@page "/listar"
@using DeepList.Client.Services
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS

@implements IDisposable

<head>
    <link rel="stylesheet" href="css/listar.css" />
</head>

<div class="custom-navbar">
    <div class="nav-left">
        <a href="/"><img src="objectives.png" alt="Logo" /></a>
        <span>DeepList</span>
    </div>

    <div class="nav-right">
        <a class="yeyy" href="/listar" style="color: #e84160;">Lista de Tarefas</a>
        <a class="yeyy" href="/adicionar">Adicionar Nova Tarefa</a>
        <a class="logout-btn" href="/logout">Logout</a>
    </div>
</div>

<!-- Filtro com botão -->
<div class="filter-bar">
    <button class="filter-toggle" @onclick="() => mostrarFiltros = !mostrarFiltros">
        <img src="filtroTarefa.jpg" width="20" />
    </button>
    <input class="form-control" @bind="filtroNome" @bind:event="oninput" placeholder="Filtrar por responsável..." />
</div>

@if (mostrarFiltros)
{
    <div class="filtro-popup">
        <label>Data máxima:</label>
        <input type="date" @bind="filtroDataMaxima" />

        <label>Dificuldade:</label>
        <select @bind="filtroDificuldade">
            <option value="">Todas</option>
            <option value="Fácil">Fácil</option>
            <option value="Média">Média</option>
            <option value="Difícil">Difícil</option>
        </select>

        <label>Mostrar:</label>
        <select @bind="modoExibicao">
            <option value="Todos">Todas</option>
            <option value="Pendentes">Somente pendentes</option>
            <option value="Concluidas">Somente concluídas</option>
        </select>
    </div>
}

@if (tarefasFiltradas.Count == 0)
{
    <p style="text-align: center; margin-top: 30px;">Nenhuma tarefa encontrada.</p>
}
else
{
    <div class="accordion" id="tarefaAccordion">
        @foreach (var tarefa in tarefasFiltradas)
        {
            <div class="accordion-item @(EstaAberta(tarefa.Id) ? "expanded" : "")" @key="@tarefa.Id">
                <div class="accordion-header">
                    <div class="header-content">
                        <div class="header-left">
                            <button class="accordion-icon-button" @onclick="() => AlternarAccordion(tarefa.Id)">
                                @(EstaAberta(tarefa.Id) ? "-" : "+")
                            </button>
                            <span class="titulo">@tarefa.Titulo</span>
                            <span class="badge-dificuldade">@tarefa.Dificultade</span>
                            <span style="color: #2a68c5; font-size: 13px;">—</span>

                            <div class="responsavel-info">
                                <img src="usuarioTarefa.jpg" width="16" />
                                @tarefa.Responsavel?.Nome
                            </div>
                        </div>

                        <div class="botoes">
                            <img src="editarTarefa.jpg"
                                 @onclick="() => EditarTarefa(tarefa.Id)" />
                            <img src="apagarTarefa.jpg"
                                 @onclick="() => DeletarTarefa(tarefa.Id)" />
                            <input class="checkbox-tarefa"
                                   type="checkbox"
                                   checked="@tarefa.Concluida"
                                   @onchange="(e) => AtualizarConclusao(tarefa, e)" />
                        </div>
                    </div>
                </div>

                <div class="accordion-body @(EstaAberta(tarefa.Id) ? "show" : "")">
                    <p><b>Descrição:</b> @tarefa.Descricao</p>
                    <div class="data">
                        <img src="dataTarefa.jpg" width="16" />
                        <p><b>Data de Entrega:</b> @tarefa.DataEntrega.ToShortDateString()</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (confirmarExclusaoId.HasValue)
{
    <div class="modal-overlay">
        <div class="modal">
            <p>Tem certeza que deseja excluir esta tarefa?</p>
            <div class="modal-actions">
                <button class="confirm" @onclick="() => DeletarTarefa(confirmarExclusaoId.Value)">Sim</button>
                <button class="cancel" @onclick="() => confirmarExclusaoId = null">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    List<Tarefa> tarefas = new();
    string filtroNome = "";
    string filtroDificuldade = "";
    DateTime? filtroDataMaxima = null;
    string modoExibicao = "Todos";
    bool mostrarFiltros = false;
    int? confirmarExclusaoId = null;

    Dictionary<int, bool> tarefaAberta = new();

    void AlternarAccordion(int id)
    {
        if (tarefaAberta.ContainsKey(id))
            tarefaAberta[id] = !tarefaAberta[id];
        else
            tarefaAberta[id] = true;
    }

    bool EstaAberta(int id) => tarefaAberta.ContainsKey(id) && tarefaAberta[id];

    List<Tarefa> tarefasFiltradas => tarefas.Where(t =>
        (modoExibicao == "Todos") ||
        (modoExibicao == "Pendentes" && !t.Concluida) ||
        (modoExibicao == "Concluidas" && t.Concluida)
    ).Where(t =>
        (string.IsNullOrWhiteSpace(filtroNome) || t.Responsavel?.Nome.Contains(filtroNome, StringComparison.OrdinalIgnoreCase) == true) &&
        (string.IsNullOrWhiteSpace(filtroDificuldade) || t.Dificultade == filtroDificuldade) &&
        (!filtroDataMaxima.HasValue || t.DataEntrega.Date <= filtroDataMaxima.Value.Date)
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
        if (!UsuarioService.EstaLogado)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        tarefas = await Http.GetFromJsonAsync<List<Tarefa>>("http://localhost:5163/api/tarefas");
    }

    async Task AtualizarConclusao(Tarefa tarefa, ChangeEventArgs e)
    {
        tarefa.Concluida = (bool)e.Value!;
        tarefa.UsuarioId = tarefa.Responsavel?.Id ?? tarefa.UsuarioId;
        tarefa.Responsavel = null;

        var response = await Http.PutAsJsonAsync($"http://localhost:5163/api/tarefas/{tarefa.Id}", tarefa);
        if (response.IsSuccessStatusCode)
        {
            tarefas = await Http.GetFromJsonAsync<List<Tarefa>>("http://localhost:5163/api/tarefas");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao atualizar tarefa.");
        }
    }

    void MostrarConfirmacao(int id) => confirmarExclusaoId = id;

    async Task DeletarTarefa(int id)
    {
        var response = await Http.DeleteAsync($"http://localhost:5163/api/tarefas/{id}");
        if (response.IsSuccessStatusCode)
        {
            tarefas = tarefas.Where(t => t.Id != id).ToList();
        }
        confirmarExclusaoId = null;
    }

    void EditarTarefa(int id) => NavigationManager.NavigateTo($"/editar/{id}");

    public void Dispose() {}

    public class Tarefa
    {
        public int Id { get; set; }
        public string Titulo { get; set; } = "";
        public string Descricao { get; set; } = "";
        public DateTime DataEntrega { get; set; }
        public int UsuarioId { get; set; }
        public Usuario? Responsavel { get; set; }
        public string Dificultade { get; set; } = "";
        public bool Concluida { get; set; }
    }

    public class Usuario
    {
        public int Id { get; set; }
        public string Nome { get; set; } = "";
    }
}